{"ast":null,"code":"var _jsxFileName = \"/Users/DSM20221/jikwan/github/TIL/memo/react-masterclass/src/routes/Chart.tsx\",\n    _s = $RefreshSig$();\n\nimport { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"../api\";\nimport ApexChart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Chart(_ref) {\n  _s();\n\n  var _data$map;\n\n  let {\n    coinId\n  } = _ref;\n  const {\n    isLoading,\n    data\n  } = useQuery([\"ohlcv\", coinId], () => fetchCoinHistory(coinId));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading ? \"Loading chart...\" : /*#__PURE__*/_jsxDEV(ApexChart, {\n      type: \"line\",\n      series: [{\n        name: \"Price\",\n        data: (_data$map = data === null || data === void 0 ? void 0 : data.map(price => parseFloat(price.close))) !== null && _data$map !== void 0 ? _data$map : []\n      }],\n      options: {\n        theme: {\n          mode: \"dark\"\n        },\n        chart: {\n          height: 300,\n          width: 500,\n          toolbar: {\n            show: false\n          },\n          background: \"transparent\"\n        },\n        grid: {\n          show: false\n        },\n        stroke: {\n          curve: \"smooth\",\n          width: 4\n        },\n        yaxis: {\n          show: false\n        },\n        xaxis: {\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          },\n          labels: {\n            show: false\n          }\n        },\n        fill: {\n          type: \"gradient\",\n          gradient: {\n            gradientToColors: [\"blue\"],\n            stops: [0, 100]\n          }\n        },\n        colors: [\"red\"],\n        tooltip: {\n          y: {\n            formatter: value => `${value.toFixed(3)}`\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chart, \"3/UYpjJNObciauUid8uIQ//UcYY=\", false, function () {\n  return [useQuery];\n});\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["useQuery","fetchCoinHistory","ApexChart","Chart","coinId","isLoading","data","name","map","price","parseFloat","close","theme","mode","chart","height","width","toolbar","show","background","grid","stroke","curve","yaxis","xaxis","axisBorder","axisTicks","labels","fill","type","gradient","gradientToColors","stops","colors","tooltip","y","formatter","value","toFixed"],"sources":["/Users/DSM20221/jikwan/github/TIL/memo/react-masterclass/src/routes/Chart.tsx"],"sourcesContent":["import { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"../api\";\nimport ApexChart from \"react-apexcharts\";\n\ninterface ChartProps {\n  coinId: string;\n}\n\ninterface IHistorical {\n  time_open: number;\n  time_close: number;\n  open: string;\n  high: string;\n  low: string;\n  close: string;\n  volume: string;\n  market_cap: number;\n}\n\nfunction Chart({ coinId }: ChartProps) {\n  const { isLoading, data } = useQuery<IHistorical[]>([\"ohlcv\", coinId], () => fetchCoinHistory(coinId));\n  return (\n    <div>\n      {isLoading ? (\n        \"Loading chart...\"\n      ) : (\n        <ApexChart\n          type=\"line\"\n          series={[\n            {\n              name: \"Price\",\n              data: data?.map((price) => parseFloat(price.close)) ?? [],\n            },\n          ]}\n          options={{\n            theme: {\n              mode: \"dark\",\n            },\n            chart: {\n              height: 300,\n              width: 500,\n              toolbar: {\n                show: false,\n              },\n              background: \"transparent\",\n            },\n            grid: { show: false },\n            stroke: {\n              curve: \"smooth\",\n              width: 4,\n            },\n            yaxis: {\n              show: false,\n            },\n            xaxis: {\n              axisBorder: {\n                show: false,\n              },\n              axisTicks: {\n                show: false,\n              },\n              labels: { show: false },\n            },\n            fill: {\n              type: \"gradient\",\n              gradient: { gradientToColors: [\"blue\"], stops: [0, 100] },\n            },\n            colors: [\"red\"],\n            tooltip: {\n              y: {\n                formatter: (value) => `${value.toFixed(3)}`,\n              },\n            },\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Chart;\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,gBAAT,QAAiC,QAAjC;AACA,OAAOC,SAAP,MAAsB,kBAAtB;;;AAiBA,SAASC,KAAT,OAAuC;EAAA;;EAAA;;EAAA,IAAxB;IAAEC;EAAF,CAAwB;EACrC,MAAM;IAAEC,SAAF;IAAaC;EAAb,IAAsBN,QAAQ,CAAgB,CAAC,OAAD,EAAUI,MAAV,CAAhB,EAAmC,MAAMH,gBAAgB,CAACG,MAAD,CAAzD,CAApC;EACA,oBACE;IAAA,UACGC,SAAS,GACR,kBADQ,gBAGR,QAAC,SAAD;MACE,IAAI,EAAC,MADP;MAEE,MAAM,EAAE,CACN;QACEE,IAAI,EAAE,OADR;QAEED,IAAI,eAAEA,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEE,GAAN,CAAWC,KAAD,IAAWC,UAAU,CAACD,KAAK,CAACE,KAAP,CAA/B,CAAF,iDAAmD;MAFzD,CADM,CAFV;MAQE,OAAO,EAAE;QACPC,KAAK,EAAE;UACLC,IAAI,EAAE;QADD,CADA;QAIPC,KAAK,EAAE;UACLC,MAAM,EAAE,GADH;UAELC,KAAK,EAAE,GAFF;UAGLC,OAAO,EAAE;YACPC,IAAI,EAAE;UADC,CAHJ;UAMLC,UAAU,EAAE;QANP,CAJA;QAYPC,IAAI,EAAE;UAAEF,IAAI,EAAE;QAAR,CAZC;QAaPG,MAAM,EAAE;UACNC,KAAK,EAAE,QADD;UAENN,KAAK,EAAE;QAFD,CAbD;QAiBPO,KAAK,EAAE;UACLL,IAAI,EAAE;QADD,CAjBA;QAoBPM,KAAK,EAAE;UACLC,UAAU,EAAE;YACVP,IAAI,EAAE;UADI,CADP;UAILQ,SAAS,EAAE;YACTR,IAAI,EAAE;UADG,CAJN;UAOLS,MAAM,EAAE;YAAET,IAAI,EAAE;UAAR;QAPH,CApBA;QA6BPU,IAAI,EAAE;UACJC,IAAI,EAAE,UADF;UAEJC,QAAQ,EAAE;YAAEC,gBAAgB,EAAE,CAAC,MAAD,CAApB;YAA8BC,KAAK,EAAE,CAAC,CAAD,EAAI,GAAJ;UAArC;QAFN,CA7BC;QAiCPC,MAAM,EAAE,CAAC,KAAD,CAjCD;QAkCPC,OAAO,EAAE;UACPC,CAAC,EAAE;YACDC,SAAS,EAAGC,KAAD,IAAY,GAAEA,KAAK,CAACC,OAAN,CAAc,CAAd,CAAiB;UADzC;QADI;MAlCF;IARX;MAAA;MAAA;MAAA;IAAA;EAJJ;IAAA;IAAA;IAAA;EAAA,QADF;AAyDD;;GA3DQnC,K;UACqBH,Q;;;KADrBG,K;AA6DT,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}